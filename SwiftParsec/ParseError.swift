/**
    The abstract data type `ParseError` represents parse errors. It
    provides the source position (`SourcePos`) of the error
    and a list of error messages (`Message`). A `ParseError`
    can be returned by the function `parse`.
*/
public struct ParseError: CustomStringConvertible {
  var pos: SourcePos
  var messages: [Message]

  init(_ pos: SourcePos, _ messages: [Message]) {
    self.pos = pos
    self.messages = messages
  }

  init(_ pos: SourcePos) {
    self.pos = pos
    self.messages = []
  }

  init(_ pos: SourcePos, _ message: Message) {
    self.pos = pos
    self.messages = [message]
  }

  var sortedMessages: [Message] {
    return messages.sorted()
  }

  var isUnknown: Bool {
    return messages.isEmpty
  }

  mutating func addMessage (_ message: Message) {
    messages.append(message)
  }

  mutating func setPos (_ pos: SourcePos) {
    self.pos = pos
  }

  mutating func setMessage (_ message: Message) {
    messages = messages.filter({ $0 != message })
    messages.append(message)
  }

  public var description: String {
    return String(pos) + ":" + showErrorMessage(sortedMessages)
  }
}

/**
    This abstract data type represents parse error messages. There are
    four kinds of messages. The fine distinction between different kinds
    of parse errors allows the system to generate quite good error messages
    for the user. Each kind of message is generated by different combinators:

    * A `SysUnExpect` message is automatically generated by the `satisfy`
      combinator. The argument is the unexpected input.

    * A `UnExpect` message is generated by the `unexpected` combinator. The
      argument describes the unexpected item.

    * A `Expect` message is generated by the `<?>` combinator. The argument
      describes the expected item.

    * A `Message` message is generated by the `fail` combinator. The argument
      is some general parser message.
*/
enum Message: Comparable {
  case SysUnExpect(String) // library generated unexpect
  case UnExpect(String) // unexpected something
  case Expect(String) // expecting something
  case Message(String) // raw message

  // Extract the message string from an error message
  var message: String {
    switch self {
    case let .SysUnExpect(s): return s
    case let .UnExpect(s): return s
    case let .Expect(s): return s
    case let .Message(s): return s
    }
  }

  var order: Int {
    switch self {
    case .SysUnExpect: return 0
    case .UnExpect: return 1
    case .Expect: return 2
    case .Message: return 3
    }
  }
}

/**
    Return `true` only when orders are equal.
*/
func == (lhs: Message, rhs: Message) -> Bool {
  return lhs.order == rhs.order
}

/**
    Compares two error messages without looking at their content. Only
    the constructors are compared where:

    `SysUnExpect` < `UnExpect` < `Expect` < `Message`
*/
func < (lhs: Message, rhs: Message) -> Bool {
  return lhs.order < rhs.order
}

func mergeError (_ e1: ParseError, _ e2: ParseError) -> ParseError {
  // prefer meaningful errors
  switch (e1.messages.isEmpty, e2.messages.isEmpty) {
  case (false, true): return e1
  case (true, false): return e2
  default:
    // select longest match
    if e1.pos > e2.pos {
      return e1
    } else if e1.pos < e2.pos {
      return e2
    } else {
      var messages = e1.messages
      messages.append(contentsOf: e2.messages)
      return ParseError(e1.pos, messages)
    }
  }
}

/**
    The standard function for showing error messages. Formats a list of
    error messages. The resulting string will be formatted like:

        unexpected {The first UnExpect or a SysUnExpect message}
        expecting {comma separated list of Expect messages}
        {comma separated list of Message messages}
*/
func showErrorMessage (_ msgs: [Message]) -> String {
  if msgs.isEmpty {
    return "unknown parse error"
  } else {
    let sysUnExpect = msgs.filter({ $0 == .SysUnExpect("") })
    let unExpect = msgs.filter({ $0 == .UnExpect("") })
    let expect = msgs.filter({ $0 == .Expect("") })
    let messages = msgs.filter({ $0 == .Message("") })

    let showMessages = showMany("", messages)
    let showExpect = showMany("expecting", expect)
    let showUnExpect = showMany("unexpected", unExpect)
    var showSysUnExpect = ""
    if !unExpect.isEmpty || sysUnExpect.isEmpty {
    } else {
      let firstMsg = sysUnExpect.first?.message
      if let firstMsg = firstMsg where !firstMsg.isEmpty {
        showSysUnExpect = "unexpected \(firstMsg)"
      } else {
        showSysUnExpect = "unexpected end of input"
      }
    }

    return [showSysUnExpect, showUnExpect, showExpect, showMessages]
      .filter { !$0.isEmpty }.joined(separator: "\n")
  }
}

func showMany (_ pre: String, _ msgs: [Message]) -> String {
  let messages = msgs.map { $0.message }.filter { !$0.isEmpty }
  if messages.isEmpty {
    return ""
  } else if pre.isEmpty {
    return commasOr(messages)
  } else {
    return pre + " " + commasOr(messages)
  }
}

func commasOr (_ msgs: [String]) -> String {
  if msgs.isEmpty {
    return ""
  } else {
    var initial = msgs
    let last = initial.removeLast()
    if initial.isEmpty {
      return last
    } else {
      return initial.joined(separator: ", ") + " or " + last
    }
  }
}
